name: Compilation

on:
  push:
    branches: ["dev", "devops"]
  pull_request:
    branches: ["main", "dev"]

jobs:
  build_gengine:
    runs-on: ${{ matrix.os }}

    strategy:
      #TODO Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Upload GEngine artifacts
        uses: actions/upload-artifact@v3
        with:
          name: gengine-build-${{ matrix.os }}-${{ matrix.cpp_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}

  build_rtype:
    runs-on: ${{ matrix.os }}

    needs: build_gengine

    strategy:
      #TODO Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Download GEngine artifacts
        uses: actions/download-artifact@v3
        with:
          name: gengine-build-${{ matrix.os }}-${{ matrix.cpp_compiler }}
          path: ${{ github.workspace }}/build

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/r-type/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}/r-type

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

  cleanup:
    needs: [build_gengine, build_rtype]
    runs-on: ubuntu-latest
    steps:
      - name: Clean up build artifacts
        run: |
          find ${{ github.workspace }} -type f \( -name "*.so" -o -name "*.o" -o -name "*.d" -name "*.a" \) -delete
          echo "Cleaned up .so, .o, and .d files."

  beautify:
    needs: cleanup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get install clang-format

      - name: Run clang-format
        run: clang-format -i $(find ${{ github.workspace }} -name "*.hpp" -o -name "*.cpp")
